{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhall-villiers/Downloads/Match Report/match-report-app-final-complete/src/pages/UploadDraw.jsx\",\n  _s = $RefreshSig$();\n// UploadDraw.jsx — Updated to parse your May 2025 draw CSV correctly\n\nimport { useState } from \"react\";\nimport { useTournament } from \"../context/TournamentContext\";\nimport Papa from \"papaparse\";\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadDraw() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  const {\n    currentTournament\n  } = useTournament();\n  const handleUpload = async () => {\n    if (!file) return;\n    setStatus(\"Parsing CSV...\");\n    Papa.parse(file, {\n      header: true,\n      complete: async results => {\n        const data = results.data;\n        let successCount = 0;\n        try {\n          for (let row of data) {\n            if (!row.date || !row.time || !row.court || !row.division || !row.teams || !row.umpire) continue;\n            const [day, month, year] = row.date.split(\"/\");\n            const parsedDate = new Date(`${year}-${month}-${day}`);\n            console.log(\"Parsed date:\", parsedDate);\n            if (!(parsedDate instanceof Date) || isNaN(parsedDate.getTime())) {\n              // Invalid date, skip this row\n              continue;\n            }\n            const match = {\n              date: Timestamp.fromDate(parsedDate),\n              time: row.time,\n              court: row.court,\n              division: row.division,\n              teams: row.teams,\n              umpire: row.umpire.trim()\n            };\n            if (!currentTournament) {\n              setStatus(\"❌ No tournament selected.\");\n              return;\n            }\n            await addDoc(collection(db, `tournaments/${currentTournament}/matches`), match);\n            successCount++;\n          }\n          setStatus(`✅ Uploaded ${successCount} matches.`);\n        } catch (err) {\n          console.error(err);\n          setStatus(\"❌ Error during upload.\");\n        }\n      },\n      error: error => {\n        console.error(\"CSV Parse Error:\", error);\n        setStatus(\"❌ Failed to parse CSV.\");\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Upload Match Draw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: e => setFile(e.target.files[0]),\n      className: \"mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bg-blue-600 text-white px-4 py-2 rounded\",\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-sm text-gray-700 dark:text-gray-200\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadDraw, \"VLB3iegTxMes30E0wU2qOzrzs8I=\", false, function () {\n  return [useTournament];\n});\n_c = UploadDraw;\nvar _c;\n$RefreshReg$(_c, \"UploadDraw\");","map":{"version":3,"names":["useState","useTournament","Papa","collection","addDoc","Timestamp","db","jsxDEV","_jsxDEV","UploadDraw","_s","file","setFile","status","setStatus","currentTournament","handleUpload","parse","header","complete","results","data","successCount","row","date","time","court","division","teams","umpire","day","month","year","split","parsedDate","Date","console","log","isNaN","getTime","match","fromDate","trim","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","e","target","files","onClick","_c","$RefreshReg$"],"sources":["/Users/andrewhall-villiers/Downloads/Match Report/match-report-app-final-complete/src/pages/UploadDraw.jsx"],"sourcesContent":["// UploadDraw.jsx — Updated to parse your May 2025 draw CSV correctly\n\nimport { useState } from \"react\";\nimport { useTournament } from \"../context/TournamentContext\";\nimport Papa from \"papaparse\";\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\n\nexport default function UploadDraw() {\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  const { currentTournament } = useTournament();\n\n  const handleUpload = async () => {\n    if (!file) return;\n    setStatus(\"Parsing CSV...\");\n\n    Papa.parse(file, {\n      header: true,\n      complete: async (results) => {\n        const data = results.data;\n        let successCount = 0;\n        try {\n          for (let row of data) {\n            if (!row.date || !row.time || !row.court || !row.division || !row.teams || !row.umpire) continue;\n\n            const [day, month, year] = row.date.split(\"/\");\n            const parsedDate = new Date(`${year}-${month}-${day}`);\n            console.log(\"Parsed date:\", parsedDate);\n            if (!(parsedDate instanceof Date) || isNaN(parsedDate.getTime())) {\n              // Invalid date, skip this row\n              continue;\n            }\n            const match = {\n              date: Timestamp.fromDate(parsedDate),\n              time: row.time,\n              court: row.court,\n              division: row.division,\n              teams: row.teams,\n              umpire: row.umpire.trim(),\n            };\n            \n            if (!currentTournament) {\n              setStatus(\"❌ No tournament selected.\");\n              return;\n            }\n\n            await addDoc(collection(db, `tournaments/${currentTournament}/matches`), match);\n            successCount++;\n          }\n          setStatus(`✅ Uploaded ${successCount} matches.`);\n        } catch (err) {\n          console.error(err);\n          setStatus(\"❌ Error during upload.\");\n        }\n      },\n      error: (error) => {\n        console.error(\"CSV Parse Error:\", error);\n        setStatus(\"❌ Failed to parse CSV.\");\n      }\n    });\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-xl font-bold mb-2\">Upload Match Draw</h2>\n      <input type=\"file\" accept=\".csv\" onChange={(e) => setFile(e.target.files[0])} className=\"mb-2\" />\n      <button\n        className=\"bg-blue-600 text-white px-4 py-2 rounded\"\n        onClick={handleUpload}\n      >\n        Upload\n      </button>\n      <p className=\"mt-2 text-sm text-gray-700 dark:text-gray-200\">{status}</p>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}